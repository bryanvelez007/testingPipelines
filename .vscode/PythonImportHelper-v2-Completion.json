[
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "BasePage",
        "importPath": "automation.utils.base_pages",
        "description": "automation.utils.base_pages",
        "isExtraImport": true,
        "detail": "automation.utils.base_pages",
        "documentation": {}
    },
    {
        "label": "Selectors",
        "importPath": "automation.utils.selectors",
        "description": "automation.utils.selectors",
        "isExtraImport": true,
        "detail": "automation.utils.selectors",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.firefox.options",
        "description": "selenium.webdriver.firefox.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.firefox.options",
        "documentation": {}
    },
    {
        "label": "ProfilePage",
        "importPath": "automation.pages.profile",
        "description": "automation.pages.profile",
        "isExtraImport": true,
        "detail": "automation.pages.profile",
        "documentation": {}
    },
    {
        "label": "CommonData",
        "importPath": "automation.utils.common_data",
        "description": "automation.utils.common_data",
        "isExtraImport": true,
        "detail": "automation.utils.common_data",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "ProfilePage",
        "kind": 6,
        "importPath": "automation.pages.profile",
        "description": "automation.pages.profile",
        "peekOfCode": "class ProfilePage(BasePage):\n    def __init__(self, driver):\n        super().__init__(driver)\n        self.username_input = (By.CSS_SELECTOR, Selectors.profile[\"Userinput\"])\n        self.password_button = (By.CSS_SELECTOR, Selectors.profile[\"PasswordInput\"])\n        self.login_button = (By.CSS_SELECTOR, Selectors.profile[\"LoginButton\"])\n    def login(self, username, password, url_expect):\n        self.type(self.username_input, username)\n        self.type(self.password_button, password)\n        self.wait_for_time_seconds(3)",
        "detail": "automation.pages.profile",
        "documentation": {}
    },
    {
        "label": "pytest_addoption",
        "kind": 2,
        "importPath": "automation.tests.conftest",
        "description": "automation.tests.conftest",
        "peekOfCode": "def pytest_addoption(parser):\n    # Agregar opciones de configuración para los navegadores y modo headless\n    parser.addoption(\n        \"--browser\",\n        action=\"store\",\n        default=\"chrome\",\n        help=\"Browser to use: chrome or firefox\",\n    )\n    parser.addoption(\n        \"--headless\",",
        "detail": "automation.tests.conftest",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 2,
        "importPath": "automation.tests.conftest",
        "description": "automation.tests.conftest",
        "peekOfCode": "def driver(request):\n    logging.info(\"Dentro del fixture driver\")\n    # Obtener opciones de configuración\n    browser = request.config.getoption(\"--browser\")\n    headless = request.config.getoption(\"--headless\")\n    # Detectar marcadores específicos\n    markers = [mark.name for mark in request.node.iter_markers()]\n    device = \"desktop\"  # Valor por defecto\n    if \"mobile\" in markers:\n        device = \"mobile\"",
        "detail": "automation.tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_login_web",
        "kind": 2,
        "importPath": "automation.tests.test_profile",
        "description": "automation.tests.test_profile",
        "peekOfCode": "def test_login_web(driver, username, password, expected_url):\n    # Instanciar la página de perfil\n    profile_page = ProfilePage(driver)\n    # Abrir la URL\n    driver.get(\"https://www.saucedemo.com/\")\n    profile_page.login(username, password, expected_url)\n@pytest.mark.parametrize(\n    \"username, password, expected_url\",\n    [\n        (CommonData.saucedemo_credentials[\"correct_user\"], CommonData.saucedemo_credentials[\"passwordPage\"], \"https://www.saucedemo.com/inventory.html\"),",
        "detail": "automation.tests.test_profile",
        "documentation": {}
    },
    {
        "label": "test_login_mobile",
        "kind": 2,
        "importPath": "automation.tests.test_profile",
        "description": "automation.tests.test_profile",
        "peekOfCode": "def test_login_mobile(driver, username, password, expected_url):\n    # Instanciar la página de perfil\n    profile_page = ProfilePage(driver)\n    # Abrir la URL\n    driver.get(\"https://www.saucedemo.com/\")\n    profile_page.login(username, password, expected_url)",
        "detail": "automation.tests.test_profile",
        "documentation": {}
    },
    {
        "label": "BasePage",
        "kind": 6,
        "importPath": "automation.utils.base_pages",
        "description": "automation.utils.base_pages",
        "peekOfCode": "class BasePage:\n    def __init__(self, driver):\n        self.driver = driver\n    def click(self, locator):\n        WebDriverWait(self.driver, 10).until(\n            EC.element_to_be_clickable(locator)\n        ).click()\n    def type(self, locator, text):\n        WebDriverWait(self.driver, 10).until(\n            EC.visibility_of_element_located(locator)",
        "detail": "automation.utils.base_pages",
        "documentation": {}
    },
    {
        "label": "CommonData",
        "kind": 6,
        "importPath": "automation.utils.common_data",
        "description": "automation.utils.common_data",
        "peekOfCode": "class CommonData:\n    saucedemo_credentials = {\n        \"correct_user\": \"standard_user\",\n        \"passwordPage\": \"secret_sauce\",\n        \"locked_out_user_message\": \"Epic sadface: Sorry, this user has been locked out.\",\n    }",
        "detail": "automation.utils.common_data",
        "documentation": {}
    },
    {
        "label": "Selectors",
        "kind": 6,
        "importPath": "automation.utils.selectors",
        "description": "automation.utils.selectors",
        "peekOfCode": "class Selectors:\n    profile = {\n        \"Userinput\": \"#user-name\",\n        \"PasswordInput\": \"#password\",\n        \"LoginButton\": \"#login-button\",\n    }",
        "detail": "automation.utils.selectors",
        "documentation": {}
    }
]